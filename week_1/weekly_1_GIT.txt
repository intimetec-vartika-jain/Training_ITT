                                                  GIT WorkFlow

A Git workflow is a recipe or recommendation for how to use Git to accomplish work in a consistent and productive manner. 


1.Centralized Workflow

A centralized workflow refers to a collaboration model where there is a central repository that serves as the main source of truth for the project. 
Multiple developers can clone the central repository, make changes to their local copies, and then push their changes back to the central repository for others to access and merge.
A centralized workflow involves every contributor committing to the main branch without using any other branch.

Advantage 

1. Centralized git workflow is easy to manage and understand.

Disadvantage

1.handle a limited no. of developers 
2.In centralized workflow single point of failure leads to the great loss.
3.Parallel developmemt is difficult in centralized workflow.


2.Feature Branch GIT Workflow

Centralized workflow is good for small projects.problem rises when 2 developers start working on 2 different functionality of the same project.here,feature branch workflow is used.
In feature branch workflow developers create a new branch whenever they start working on the new modules of the project instead of directly commiting to the main branch.

Advantage

1.It reduces the risk of conflict.
2.Reliable for continous integration and continous delivery.

Disadvantage
1.It does not have many capabilities to solve anything about the environment,release,deploy and issue.
2.Unstabilized production code.


3.GitFlow WorkFlow

Git flow workflow: The Git flow workflow defines a specific branching model with two main branches:

"master" branch: Represents the stable and production-ready state of the project. It should always contain the latest stable release.
"develop" branch: Serves as the main development branch where new features are integrated and tested.


Advantage 
1.Best for dealing with multiple versions in production or already developed products.
2.It is utilized by multiple developers

Disadvantage
1.Extensive features take days for merging purposes and solving issues.
2.When the whole work is merged, it becomes difficult to figure out the actual work

4. forking Git Workflow

This workflow is different from other workflows it give developer their own repository insted of central server side repository.developer push therir work in their own repository. only, the project maintainers can push to the official repository.

Advantage 
1.Enables big teams to work on complex software.
2.More effective for both large and small teams.

Disadvantage
1.Only the maintainer has the authority to push to the official repository rather than the programmers.


5.Personal Git Workflow

this workflow is very similar to the feature branch workflow. the difference is that it has single branch per developer rather than single branch per feature. 

Advantage 
1.Offers branches per developer.
2.Best for fixing bugs.
3.useful for long-running features. 

Disadvantage
1.This workflow can work better for small teams.